/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: agarcia <agarcia@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/08 23:26:31 by agarcia           #+#    #+#             */
/*   Updated: 2025/08/10 14:05:50 by agarcia          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./philo.h"
#include <stdio.h>
#include <stdlib.h>

void	init_simulation(t_data *data)
{
	int	i;

	i = 0;
	while (i < data->philo_count)
	{
		pthread_create(&data->philos[i].thread_id, NULL, philo_routine,
			&data->philos[i]);
		i++;
	}
	i = 0;
	while (i < data->philo_count)
	{
		pthread_join(data->philos[i].thread_id, NULL);
		i++;
	}
}

void	init_table(t_data *data)
{
	int	i;

	data->forks = malloc(sizeof(pthread_mutex_t) * data->philo_count);
	if (!data->forks)
		return ;
	i = -1;
	while (++i < data->philo_count)
		pthread_mutex_init(&data->forks[i], NULL);
	data->philos = malloc(sizeof(t_philo) * data->philo_count);
	if (!data->philos)
		return ;
	data->someone_died = 0;
	pthread_mutex_init(&data->print_mutex, NULL);
	i = 0;
	while (i < data->philo_count)
	{
		data->philos[i].id = i + 1;
		data->philos[i].meals_eaten = 0;
		data->philos[i].last_meal = data->start_time;
		data->philos[i].left_fork = i;
		data->philos[i].right_fork = (i + 1) % data->philo_count;
		data->philos[i].data = data;
		i++;
	}
}

void	store_data(t_data *data, int argc, char **argv)
{
	data->philo_count = atoi(argv[1]);
	data->time_to_die = atoi(argv[2]);
	data->time_to_eat = atoi(argv[3]);
	data->time_to_sleep = atoi(argv[4]);
	data->must_eat = (argc == 6) ? atoi(argv[5]) : -1;
}

int	main(int argc, char **argv)
{
	t_data	*data;

	if (argc != 5 && argc != 6)
	{
		printf("Usage:\n");
		printf("%s number_of_philosophers time_to_die time_to_eat time_to_sleep [data->must_eat]\n",
			argv[0]);
		return (1);
	}
	data = malloc(sizeof(t_data));
	store_data(data, argc, argv);
	data->start_time = get_real_time_ms();
	init_table(data);
	init_simulation(data);
	for (int i = 0; i < data->philo_count; i++)
		pthread_mutex_destroy(&data->forks[i]);
	pthread_mutex_destroy(&data->print_mutex);
	free(data->forks);
	free(data->philos);
	free(data);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: agarcia <agarcia@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/08 23:11:36 by agarcia           #+#    #+#             */
/*   Updated: 2025/08/10 13:54:23 by agarcia          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PHILO_H
# define PHILO_H

# include <pthread.h>
# include <sys/time.h>

typedef struct s_data
{
	long			start_time;
	int				philo_count;
	int				time_to_die;
	int				time_to_eat;
	int				time_to_sleep;
	int				must_eat;
	pthread_mutex_t	*forks;
	struct s_philo	*philos;
	pthread_mutex_t	print_mutex;
	int				someone_died;
}					t_data;

typedef struct s_philo
{
	int				id;
	int				meals_eaten;
	long			last_meal;
	pthread_t		thread_id;
	int				left_fork;
	int				right_fork;
	t_data			*data;
}					t_philo;

long				get_timestamp(t_data *data);
void				*philo_routine(void *arg);
long				get_real_time_ms(void);

#endif // PHILO_H
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_actions.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: agarcia <agarcia@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/09 00:53:55 by agarcia           #+#    #+#             */
/*   Updated: 2025/08/10 14:05:06 by agarcia          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"
#include <stdio.h>
#include <unistd.h>

int	is_dead(t_philo *philo)
{
	long	time_since_last_meal;

	time_since_last_meal = get_timestamp(philo->data) - philo->last_meal;
	if (time_since_last_meal >= philo->data->time_to_die)
	{
		pthread_mutex_lock(&philo->data->print_mutex);
		if (!philo->data->someone_died)
		{
			philo->data->someone_died = 1;
			printf("%ld %d died\n", get_timestamp(philo->data), philo->id);
		}
		pthread_mutex_unlock(&philo->data->print_mutex);
		return (1);
	}
	return (0);
}

void	print_status(t_philo *philo, char *msg)
{
	pthread_mutex_lock(&philo->data->print_mutex);
	if (!philo->data->someone_died)
		printf("%ld %d %s\n", get_timestamp(philo->data), philo->id, msg);
	pthread_mutex_unlock(&philo->data->print_mutex);
}

void	take_forks(t_philo *philo)
{
	pthread_mutex_lock(&philo->data->forks[philo->left_fork]);
	print_status(philo, "has taken a fork");
	pthread_mutex_lock(&philo->data->forks[philo->right_fork]);
	print_status(philo, "has taken a fork");
}

void	put_forks(t_philo *philo)
{
	pthread_mutex_unlock(&philo->data->forks[philo->left_fork]);
	pthread_mutex_unlock(&philo->data->forks[philo->right_fork]);
}

void	smart_sleep(long duration_ms, t_philo *philo)
{
	long	start;

	start = get_timestamp(philo->data);
	while ((get_timestamp(philo->data) - start) < duration_ms)
	{
		if (is_dead(philo))
			break ;
		usleep(100);
	}
}

void	philo_sleep(t_philo *philo)
{
	print_status(philo, "is sleeping");
	smart_sleep(philo->data->time_to_sleep, philo);
}

void	philo_eat(t_philo *philo)
{
	print_status(philo, "is eating");
	smart_sleep(philo->data->time_to_eat, philo);
	philo->last_meal = get_timestamp(philo->data);
	philo->meals_eaten++;
}

void	philo_think(t_philo *philo)
{
	long	think_time;

	think_time = (philo->data->time_to_die - philo->data->time_to_eat
			- philo->data->time_to_sleep) / 2;
	if (think_time < 0)
		think_time = 0;
	print_status(philo, "is thinking");
	smart_sleep(think_time, philo);
}

void	*philo_routine(void *arg)
{
	t_philo *philo;

	philo = (t_philo *)arg;
	if (philo->id % 2 == 0)
		usleep(1000);
	while (!philo->data->someone_died && (philo->data->must_eat == -1
			|| philo->meals_eaten < philo->data->must_eat))
	{
		if (is_dead(philo))
			break ;
		philo_think(philo);
		take_forks(philo);
		philo_eat(philo);
		put_forks(philo);
		philo_sleep(philo);
	}
	return (NULL);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: agarcia <agarcia@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/09 23:12:25 by agarcia           #+#    #+#             */
/*   Updated: 2025/08/10 13:46:20 by agarcia          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./philo.h"

long	get_timestamp(t_data *data)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (((tv.tv_sec * 1000) + (tv.tv_usec / 1000)) - data->start_time);
}

long	get_real_time_ms(void)
{
	struct timeval tv;
	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000 + tv.tv_usec / 1000);
}